function varargout = W0(varargin)
Q = lib.ecma.struct(...
	'dX',		15,...
	varargin{:} ...
);

% set iteration print function
sPrec	= '%1.12e';
sStrong = ['<strong>' sPrec '</strong>'];
sFormat = strjoin({'%1.3e',sPrec,sPrec,sStrong,'\n'},'\t');
fLog	= @(SOL) fprintf(sFormat,Q.list.chi2(SOL),SOL.data.beta0,SOL.data.theta0,SOL.data.W0);

% set chi2 function (solution => value)
fResponse = @(SOL) Q.list.chi2(SOL);

% set update function (param + struct => struct)
fUpdate = @(x,vm) lib.struct.setfield(vm,...
	'W0',			x ...
);

% set model function (solution => struct)
fModel = @(SOL) lib.struct.setfield(Q.model,...
	'beta0',		SOL.data.beta0,...
	'theta0',		SOL.data.theta0,...
	'W0',			SOL.data.W0 ...
);

% set search interval
Xint(1) = Q.model.W0 - Q.dX;
Xint(2) = Q.model.W0 + Q.dX;

% search for solution
[varargout{1:nargout}] = lib.model.cRAR.find.gosect(...
	'model',		Q.model,...
	'Xint',			Xint,...
	'fResponse',	fResponse,...
	'fModel',		fModel,...
	'fUpdate',		fUpdate,...
	'fLog',			fLog,...
	varargin{:} ...
);
